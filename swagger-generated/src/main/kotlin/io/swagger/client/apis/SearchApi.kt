/**
 * Torrow API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import net.torrow.api.models.AdvisedItemType
import net.torrow.api.models.CalendarView
import net.torrow.api.models.CaseView
import net.torrow.api.models.ContactView
import net.torrow.api.models.NoteView
import net.torrow.api.models.OrderFilter
import net.torrow.api.models.OrderViewSortCondition
import net.torrow.api.models.ResourceView
import net.torrow.api.models.ServiceView
import net.torrow.api.models.TorrowItem

import io.swagger.client.infrastructure.*

class SearchApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param type  (optional)
     * @param longitude  (optional)
     * @param latitude  (optional)
     * @param language  (optional)
     * @param take  (optional)
     * @param skip  (optional)
     * @return kotlin.Array<TorrowItem>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1SearchAdviseditemsGet(type: AdvisedItemType? = null, longitude: kotlin.Double? = null, latitude: kotlin.Double? = null, language: kotlin.String? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null): kotlin.Array<TorrowItem> {
        val localVariableQuery: MultiValueMap = mapOf("type" to listOf("$type"), "longitude" to listOf("$longitude"), "latitude" to listOf("$latitude"), "language" to listOf("$language"), "take" to listOf("$take"), "skip" to listOf("$skip"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/search/adviseditems", query = localVariableQuery
        )
        val response = request<kotlin.Array<TorrowItem>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<TorrowItem>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param text  (optional)
     * @param distance  (optional)
     * @param take  (optional)
     * @param skip  (optional)
     * @param groupIds  (optional)
     * @return kotlin.Array<CalendarView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1SearchCalendarsGet(text: kotlin.String? = null, distance: kotlin.Int? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, groupIds: kotlin.Array<kotlin.String>? = null): kotlin.Array<CalendarView> {
        val localVariableQuery: MultiValueMap = mapOf("text" to listOf("$text"), "distance" to listOf("$distance"), "take" to listOf("$take"), "skip" to listOf("$skip"), "groupIds" to toMultiValue(groupIds!!.toList(), "multi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/search/calendars", query = localVariableQuery
        )
        val response = request<kotlin.Array<CalendarView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CalendarView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param text  (optional)
     * @param distance  (optional)
     * @param take  (optional)
     * @param skip  (optional)
     * @param groupIds  (optional)
     * @return kotlin.Array<CaseView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1SearchCasesGet(text: kotlin.String? = null, distance: kotlin.Int? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, groupIds: kotlin.Array<kotlin.String>? = null): kotlin.Array<CaseView> {
        val localVariableQuery: MultiValueMap = mapOf("text" to listOf("$text"), "distance" to listOf("$distance"), "take" to listOf("$take"), "skip" to listOf("$skip"), "groupIds" to toMultiValue(groupIds!!.toList(), "multi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/search/cases", query = localVariableQuery
        )
        val response = request<kotlin.Array<CaseView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CaseView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param text  (optional)
     * @param distance  (optional)
     * @param usersOnly  (optional)
     * @param take  (optional)
     * @param skip  (optional)
     * @param groupIds  (optional)
     * @param isSubscribersSearch  (optional, default to false)
     * @return kotlin.Array<ContactView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1SearchContactsGet(text: kotlin.String? = null, distance: kotlin.Int? = null, usersOnly: kotlin.Boolean? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, groupIds: kotlin.Array<kotlin.String>? = null, isSubscribersSearch: kotlin.Boolean? = null): kotlin.Array<ContactView> {
        val localVariableQuery: MultiValueMap = mapOf("text" to listOf("$text"), "distance" to listOf("$distance"), "usersOnly" to listOf("$usersOnly"), "take" to listOf("$take"), "skip" to listOf("$skip"), "groupIds" to toMultiValue(groupIds!!.toList(), "multi"), "isSubscribersSearch" to listOf("$isSubscribersSearch"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/search/contacts", query = localVariableQuery
        )
        val response = request<kotlin.Array<ContactView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ContactView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param text  (optional)
     * @param distance  (optional)
     * @param take  (optional)
     * @param skip  (optional)
     * @param groupIds  (optional)
     * @return kotlin.Array<NoteView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1SearchNotesGet(text: kotlin.String? = null, distance: kotlin.Int? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, groupIds: kotlin.Array<kotlin.String>? = null): kotlin.Array<NoteView> {
        val localVariableQuery: MultiValueMap = mapOf("text" to listOf("$text"), "distance" to listOf("$distance"), "take" to listOf("$take"), "skip" to listOf("$skip"), "groupIds" to toMultiValue(groupIds!!.toList(), "multi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/search/notes", query = localVariableQuery
        )
        val response = request<kotlin.Array<NoteView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<NoteView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param text  (optional)
     * @param distance  (optional)
     * @param take  (optional)
     * @param skip  (optional)
     * @param groupIds  (optional)
     * @return kotlin.Array<ResourceView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1SearchResourcesGet(text: kotlin.String? = null, distance: kotlin.Int? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, groupIds: kotlin.Array<kotlin.String>? = null): kotlin.Array<ResourceView> {
        val localVariableQuery: MultiValueMap = mapOf("text" to listOf("$text"), "distance" to listOf("$distance"), "take" to listOf("$take"), "skip" to listOf("$skip"), "groupIds" to toMultiValue(groupIds!!.toList(), "multi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/search/resources", query = localVariableQuery
        )
        val response = request<kotlin.Array<ResourceView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ResourceView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param text  (optional)
     * @param distance  (optional)
     * @param take  (optional)
     * @param skip  (optional)
     * @param groupIds  (optional)
     * @return kotlin.Array<ServiceView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1SearchServicesGet(text: kotlin.String? = null, distance: kotlin.Int? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, groupIds: kotlin.Array<kotlin.String>? = null): kotlin.Array<ServiceView> {
        val localVariableQuery: MultiValueMap = mapOf("text" to listOf("$text"), "distance" to listOf("$distance"), "take" to listOf("$take"), "skip" to listOf("$skip"), "groupIds" to toMultiValue(groupIds!!.toList(), "multi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/search/services", query = localVariableQuery
        )
        val response = request<kotlin.Array<ServiceView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ServiceView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param take  (optional, default to 2147483647)
     * @param skip  (optional, default to 0)
     * @param lmFrom  (optional)
     * @param lmTo  (optional)
     * @param createDateFrom  (optional)
     * @param createDateTo  (optional)
     * @param sort  (optional)
     * @return kotlin.Array<CaseView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1SearchTorrowIdOrdersPut(torrowId: kotlin.String, body: OrderFilter? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, lmFrom: java.time.LocalDateTime? = null, lmTo: java.time.LocalDateTime? = null, createDateFrom: java.time.LocalDateTime? = null, createDateTo: java.time.LocalDateTime? = null, sort: OrderViewSortCondition? = null): kotlin.Array<CaseView> {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("take" to listOf("$take"), "skip" to listOf("$skip"), "lmFrom" to listOf("$lmFrom"), "lmTo" to listOf("$lmTo"), "createDateFrom" to listOf("$createDateFrom"), "createDateTo" to listOf("$createDateTo"), "sort" to listOf("$sort"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/search/{torrowId}/orders".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<kotlin.Array<CaseView>>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CaseView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
