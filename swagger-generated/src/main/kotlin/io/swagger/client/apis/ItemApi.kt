/**
 * Torrow API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import net.torrow.api.models.DeleteResponse
import net.torrow.api.models.Feedback
import net.torrow.api.models.ItemFeedback
import net.torrow.api.models.ItemViewSortCondition
import net.torrow.api.models.ParticipationResp
import net.torrow.api.models.UserFeedback

import io.swagger.client.infrastructure.*

class ItemApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param shareItemSessionId  
     * @param userProfileId  (optional)
     * @param code  (optional)
     * @return ParticipationResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemActivateshareitemsessionShareItemSessionIdPut(shareItemSessionId: kotlin.String, userProfileId: kotlin.String? = null, code: kotlin.String? = null): ParticipationResp {
        val localVariableQuery: MultiValueMap = mapOf("userProfileId" to listOf("$userProfileId"), "code" to listOf("$code"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/item/activateshareitemsession/{shareItemSessionId}".replace("{" + "shareItemSessionId" + "}", "$shareItemSessionId"), query = localVariableQuery
        )
        val response = request<ParticipationResp>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ParticipationResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param createDateFrom  (optional)
     * @param createDateTo  (optional)
     * @param scoreFrom  (optional)
     * @param scoreTo  (optional)
     * @param profileIdsFilter  (optional)
     * @param take  (optional, default to 2147483647)
     * @param skip  (optional, default to 0)
     * @param lmfrom  (optional)
     * @param lmto  (optional)
     * @param includeDeleted  (optional, default to false)
     * @param sort  (optional)
     * @return kotlin.Array<ItemFeedback>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdFeedbacksGet(torrowId: kotlin.String, createDateFrom: java.time.LocalDateTime? = null, createDateTo: java.time.LocalDateTime? = null, scoreFrom: kotlin.Double? = null, scoreTo: kotlin.Double? = null, profileIdsFilter: kotlin.Array<kotlin.String>? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, lmfrom: java.time.LocalDateTime? = null, lmto: java.time.LocalDateTime? = null, includeDeleted: kotlin.Boolean? = null, sort: ItemViewSortCondition? = null): kotlin.Array<ItemFeedback> {
        val localVariableQuery: MultiValueMap = mapOf("createDateFrom" to listOf("$createDateFrom"), "createDateTo" to listOf("$createDateTo"), "scoreFrom" to listOf("$scoreFrom"), "scoreTo" to listOf("$scoreTo"), "profileIdsFilter" to toMultiValue(profileIdsFilter!!.toList(), "multi"), "take" to listOf("$take"), "skip" to listOf("$skip"), "lmfrom" to listOf("$lmfrom"), "lmto" to listOf("$lmto"), "includeDeleted" to listOf("$includeDeleted"), "sort" to listOf("$sort"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/item/{torrowId}/feedbacks".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<kotlin.Array<ItemFeedback>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ItemFeedback>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param messageId  
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return DeleteResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdFeedbacksMessageIdDelete(torrowId: kotlin.String, messageId: kotlin.String, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): DeleteResponse {
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/item/{torrowId}/feedbacks/{messageId}".replace("{" + "torrowId" + "}", "$torrowId").replace("{" + "messageId" + "}", "$messageId"), query = localVariableQuery
        )
        val response = request<DeleteResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DeleteResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param messageId  
     * @param versionToCheck  (optional, default to 0)
     * @param includeDeleted  (optional, default to false)
     * @return Feedback
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdFeedbacksMessageIdGet(torrowId: kotlin.String, messageId: kotlin.String, versionToCheck: kotlin.Int? = null, includeDeleted: kotlin.Boolean? = null): Feedback {
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "includeDeleted" to listOf("$includeDeleted"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/item/{torrowId}/feedbacks/{messageId}".replace("{" + "torrowId" + "}", "$torrowId").replace("{" + "messageId" + "}", "$messageId"), query = localVariableQuery
        )
        val response = request<Feedback>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Feedback
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param messageId  
     * @param profileId  (optional)
     * @param header  (optional)
     * @param text  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return Feedback
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdFeedbacksMessageIdPut(torrowId: kotlin.String, messageId: kotlin.String, profileId: kotlin.String? = null, header: kotlin.String? = null, text: kotlin.String? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): Feedback {
        val localVariableQuery: MultiValueMap = mapOf("profileId" to listOf("$profileId"), "header" to listOf("$header"), "text" to listOf("$text"), "versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/item/{torrowId}/feedbacks/{messageId}".replace("{" + "torrowId" + "}", "$torrowId").replace("{" + "messageId" + "}", "$messageId"), query = localVariableQuery
        )
        val response = request<Feedback>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Feedback
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param messageId  
     * @param createDateFrom  (optional)
     * @param createDateTo  (optional)
     * @param profileIdsFilter  (optional)
     * @param take  (optional, default to 2147483647)
     * @param skip  (optional, default to 0)
     * @param lmfrom  (optional)
     * @param lmto  (optional)
     * @param includeDeleted  (optional, default to false)
     * @param sort  (optional)
     * @return kotlin.Array<Feedback>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdFeedbacksMessageIdRepliesGet(torrowId: kotlin.String, messageId: kotlin.String, createDateFrom: java.time.LocalDateTime? = null, createDateTo: java.time.LocalDateTime? = null, profileIdsFilter: kotlin.Array<kotlin.String>? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, lmfrom: java.time.LocalDateTime? = null, lmto: java.time.LocalDateTime? = null, includeDeleted: kotlin.Boolean? = null, sort: ItemViewSortCondition? = null): kotlin.Array<Feedback> {
        val localVariableQuery: MultiValueMap = mapOf("createDateFrom" to listOf("$createDateFrom"), "createDateTo" to listOf("$createDateTo"), "profileIdsFilter" to toMultiValue(profileIdsFilter!!.toList(), "multi"), "take" to listOf("$take"), "skip" to listOf("$skip"), "lmfrom" to listOf("$lmfrom"), "lmto" to listOf("$lmto"), "includeDeleted" to listOf("$includeDeleted"), "sort" to listOf("$sort"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/item/{torrowId}/feedbacks/{messageId}/replies".replace("{" + "torrowId" + "}", "$torrowId").replace("{" + "messageId" + "}", "$messageId"), query = localVariableQuery
        )
        val response = request<kotlin.Array<Feedback>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Feedback>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param messageId  
     * @param profileId  (optional)
     * @param header  (optional)
     * @param text  (optional)
     * @param checkVersion  (optional, default to true)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return Feedback
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdFeedbacksMessageIdReplyPost(torrowId: kotlin.String, messageId: kotlin.String, profileId: kotlin.String? = null, header: kotlin.String? = null, text: kotlin.String? = null, checkVersion: kotlin.Boolean? = null, isNeedAnnouncement: kotlin.Boolean? = null): Feedback {
        val localVariableQuery: MultiValueMap = mapOf("profileId" to listOf("$profileId"), "header" to listOf("$header"), "text" to listOf("$text"), "checkVersion" to listOf("$checkVersion"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/item/{torrowId}/feedbacks/{messageId}/reply".replace("{" + "torrowId" + "}", "$torrowId").replace("{" + "messageId" + "}", "$messageId"), query = localVariableQuery
        )
        val response = request<Feedback>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Feedback
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param profileId  (optional)
     * @param header  (optional)
     * @param text  (optional)
     * @param checkVersion  (optional, default to true)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return Feedback
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdFeedbacksNewmessagePost(torrowId: kotlin.String, profileId: kotlin.String? = null, header: kotlin.String? = null, text: kotlin.String? = null, checkVersion: kotlin.Boolean? = null, isNeedAnnouncement: kotlin.Boolean? = null): Feedback {
        val localVariableQuery: MultiValueMap = mapOf("profileId" to listOf("$profileId"), "header" to listOf("$header"), "text" to listOf("$text"), "checkVersion" to listOf("$checkVersion"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/item/{torrowId}/feedbacks/newmessage".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<Feedback>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Feedback
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param profileId  (optional)
     * @param messageId  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return DeleteResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdUserfeedbackDelete(torrowId: kotlin.String, profileId: kotlin.String? = null, messageId: kotlin.String? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): DeleteResponse {
        val localVariableQuery: MultiValueMap = mapOf("profileId" to listOf("$profileId"), "messageId" to listOf("$messageId"), "versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/item/{torrowId}/userfeedback".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<DeleteResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DeleteResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param throwExceptionIfNotFound  (optional, default to false)
     * @param versionToCheck  (optional, default to 0)
     * @param includeDeleted  (optional, default to false)
     * @return UserFeedback
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdUserfeedbackGet(torrowId: kotlin.String, throwExceptionIfNotFound: kotlin.Boolean? = null, versionToCheck: kotlin.Int? = null, includeDeleted: kotlin.Boolean? = null): UserFeedback {
        val localVariableQuery: MultiValueMap = mapOf("throwExceptionIfNotFound" to listOf("$throwExceptionIfNotFound"), "versionToCheck" to listOf("$versionToCheck"), "includeDeleted" to listOf("$includeDeleted"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/item/{torrowId}/userfeedback".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<UserFeedback>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserFeedback
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param profileId  (optional)
     * @param score  (optional)
     * @param header  (optional)
     * @param text  (optional)
     * @param surveyResponse  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return UserFeedback
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemTorrowIdUserfeedbackPut(torrowId: kotlin.String, profileId: kotlin.String? = null, score: kotlin.Double? = null, header: kotlin.String? = null, text: kotlin.String? = null, surveyResponse: kotlin.String? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): UserFeedback {
        val localVariableQuery: MultiValueMap = mapOf("profileId" to listOf("$profileId"), "score" to listOf("$score"), "header" to listOf("$header"), "text" to listOf("$text"), "surveyResponse" to listOf("$surveyResponse"), "versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/item/{torrowId}/userfeedback".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<UserFeedback>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UserFeedback
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param uniqueName  
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ItemUniquenameUniqueNameGet(uniqueName: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/item/uniquename/{uniqueName}".replace("{" + "uniqueName" + "}", "$uniqueName")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
