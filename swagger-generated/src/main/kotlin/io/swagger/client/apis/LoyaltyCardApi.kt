/**
 * Torrow API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import net.torrow.api.models.BalanceValue
import net.torrow.api.models.DeleteResponse
import net.torrow.api.models.FileInfo
import net.torrow.api.models.GetParticipationCountResp
import net.torrow.api.models.ItemViewSortCondition
import net.torrow.api.models.LoyaltyCardItem
import net.torrow.api.models.ObjectInfo
import net.torrow.api.models.ParticipantState
import net.torrow.api.models.ParticipantType
import net.torrow.api.models.ParticipantView
import net.torrow.api.models.Participation
import net.torrow.api.models.ParticipationResp
import net.torrow.api.models.PersonalSolutionData
import net.torrow.api.models.PutUrlResp
import net.torrow.api.models.SaveItemToMindMapReq
import net.torrow.api.models.SendLinkOfItemReq
import net.torrow.api.models.SendLinkOfItemResp
import net.torrow.api.models.SetGroupItemReq
import net.torrow.api.models.ShareItemReq
import net.torrow.api.models.SolutionData
import net.torrow.api.models.TorrowItem
import net.torrow.api.models.TorrowObject
import net.torrow.api.models.UnsetGroupItemReq
import net.torrow.api.models.UpdateFileIdResp
import net.torrow.api.models.UpdateMasterInfoReq
import net.torrow.api.models.UpdatePersonalListOrderReq
import net.torrow.api.models.UpdatePersonalListOrderResp

import io.swagger.client.infrastructure.*

class LoyaltyCardApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param take  (optional, default to 2147483647)
     * @param skip  (optional, default to 0)
     * @param lmFrom  (optional)
     * @param lmTo  (optional)
     * @param includeDeleted  (optional, default to false)
     * @param includeBalance  (optional, default to false)
     * @param sort  (optional)
     * @param profileId  (optional)
     * @param onlyWithEmptyProfile  (optional)
     * @param participantStateList  (optional)
     * @param participantTypeList  (optional)
     * @return kotlin.Array<LoyaltyCardItem>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsPersonallistGet(take: kotlin.Int? = null, skip: kotlin.Int? = null, lmFrom: java.time.LocalDateTime? = null, lmTo: java.time.LocalDateTime? = null, includeDeleted: kotlin.Boolean? = null, includeBalance: kotlin.Boolean? = null, sort: ItemViewSortCondition? = null, profileId: kotlin.String? = null, onlyWithEmptyProfile: kotlin.Boolean? = null, participantStateList: kotlin.Array<ParticipantState>? = null, participantTypeList: kotlin.Array<ParticipantType>? = null): kotlin.Array<LoyaltyCardItem> {
        val localVariableQuery: MultiValueMap = mapOf("take" to listOf("$take"), "skip" to listOf("$skip"), "lmFrom" to listOf("$lmFrom"), "lmTo" to listOf("$lmTo"), "includeDeleted" to listOf("$includeDeleted"), "includeBalance" to listOf("$includeBalance"), "sort" to listOf("$sort"), "profileId" to listOf("$profileId"), "onlyWithEmptyProfile" to listOf("$onlyWithEmptyProfile"), "participantStateList" to toMultiValue(participantStateList!!.toList(), "multi"), "participantTypeList" to toMultiValue(participantTypeList!!.toList(), "multi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/loyaltycards/personallist", query = localVariableQuery
        )
        val response = request<kotlin.Array<LoyaltyCardItem>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<LoyaltyCardItem>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @return void
     */
    fun apiV1LoyaltycardsPersonallistTorrowIdDelete(torrowId: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/loyaltycards/personallist/{torrowId}".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param body  (optional)
     * @return UpdatePersonalListOrderResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsPersonallistUpdateorderPost(body: UpdatePersonalListOrderReq? = null): UpdatePersonalListOrderResp {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/loyaltycards/personallist/updateorder"
        )
        val response = request<UpdatePersonalListOrderResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UpdatePersonalListOrderResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return ObjectInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdAliasPut(torrowId: kotlin.String, body: kotlin.String? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): ObjectInfo {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/alias".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<ObjectInfo>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ObjectInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @return kotlin.Array<BalanceValue>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdBalanceGet(torrowId: kotlin.String): kotlin.Array<BalanceValue> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/loyaltycards/{torrowId}/balance".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<kotlin.Array<BalanceValue>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<BalanceValue>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param cascade  (optional)
     * @param withPinnedItems  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return DeleteResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdDelete(torrowId: kotlin.String, cascade: kotlin.Boolean? = null, withPinnedItems: kotlin.Boolean? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): DeleteResponse {
        val localVariableQuery: MultiValueMap = mapOf("cascade" to listOf("$cascade"), "withPinnedItems" to listOf("$withPinnedItems"), "versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/loyaltycards/{torrowId}".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<DeleteResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DeleteResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param versionToCheck  (optional, default to 0)
     * @param includeDeleted  (optional, default to false)
     * @param includeChildItems  (optional, default to false)
     * @param includeBalance  (optional, default to true)
     * @return LoyaltyCardItem
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdGet(torrowId: kotlin.String, versionToCheck: kotlin.Int? = null, includeDeleted: kotlin.Boolean? = null, includeChildItems: kotlin.Boolean? = null, includeBalance: kotlin.Boolean? = null): LoyaltyCardItem {
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "includeDeleted" to listOf("$includeDeleted"), "includeChildItems" to listOf("$includeChildItems"), "includeBalance" to listOf("$includeBalance"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/loyaltycards/{torrowId}".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<LoyaltyCardItem>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LoyaltyCardItem
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @return TorrowItem
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdGroupSetPut(torrowId: kotlin.String, body: SetGroupItemReq? = null): TorrowItem {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/group/set".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<TorrowItem>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TorrowItem
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @return TorrowItem
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdGroupUnsetPut(torrowId: kotlin.String, body: UnsetGroupItemReq? = null): TorrowItem {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/group/unset".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<TorrowItem>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TorrowItem
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return UpdateFileIdResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdImageIdPut(torrowId: kotlin.String, body: kotlin.String? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): UpdateFileIdResp {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/image/id".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<UpdateFileIdResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UpdateFileIdResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @return FileInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdImageInfoGet(torrowId: kotlin.String): FileInfo {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/loyaltycards/{torrowId}/image/info".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<FileInfo>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param fileId  (optional)
     * @param fileName  (optional)
     * @param fileSize  (optional, default to 0)
     * @return PutUrlResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdImagePuturlGet(torrowId: kotlin.String, fileId: kotlin.String? = null, fileName: kotlin.String? = null, fileSize: kotlin.Long? = null): PutUrlResp {
        val localVariableQuery: MultiValueMap = mapOf("fileId" to listOf("$fileId"), "fileName" to listOf("$fileName"), "fileSize" to listOf("$fileSize"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/loyaltycards/{torrowId}/image/puturl".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<PutUrlResp>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as PutUrlResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return TorrowObject
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdIntegrationsPut(torrowId: kotlin.String, body: kotlin.Array<kotlin.String>? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): TorrowObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/integrations".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<TorrowObject>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TorrowObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return ObjectInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdLastusagetimePut(torrowId: kotlin.String, body: java.time.LocalDateTime? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): ObjectInfo {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/lastusagetime".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<ObjectInfo>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ObjectInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return TorrowObject
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdMasterinfoPut(torrowId: kotlin.String, body: UpdateMasterInfoReq? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): TorrowObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/masterinfo".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<TorrowObject>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TorrowObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param participantStateList  (optional)
     * @param participantTypeList  (optional)
     * @return GetParticipationCountResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipantsCountGet(torrowId: kotlin.String, participantStateList: kotlin.Array<ParticipantState>? = null, participantTypeList: kotlin.Array<ParticipantType>? = null): GetParticipationCountResp {
        val localVariableQuery: MultiValueMap = mapOf("participantStateList" to toMultiValue(participantStateList!!.toList(), "multi"), "participantTypeList" to toMultiValue(participantTypeList!!.toList(), "multi"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/loyaltycards/{torrowId}/participants/count".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<GetParticipationCountResp>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GetParticipationCountResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param participantStateList  (optional)
     * @param participantTypeList  (optional)
     * @param take  (optional, default to 2147483647)
     * @param skip  (optional, default to 0)
     * @param lmFrom  (optional)
     * @param lmTo  (optional)
     * @param includeDeleted  (optional, default to false)
     * @param sort  (optional)
     * @return kotlin.Array<ParticipantView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipantsGet(torrowId: kotlin.String, participantStateList: kotlin.Array<ParticipantState>? = null, participantTypeList: kotlin.Array<ParticipantType>? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, lmFrom: java.time.LocalDateTime? = null, lmTo: java.time.LocalDateTime? = null, includeDeleted: kotlin.Boolean? = null, sort: ItemViewSortCondition? = null): kotlin.Array<ParticipantView> {
        val localVariableQuery: MultiValueMap = mapOf("participantStateList" to toMultiValue(participantStateList!!.toList(), "multi"), "participantTypeList" to toMultiValue(participantTypeList!!.toList(), "multi"), "take" to listOf("$take"), "skip" to listOf("$skip"), "lmFrom" to listOf("$lmFrom"), "lmTo" to listOf("$lmTo"), "includeDeleted" to listOf("$includeDeleted"), "sort" to listOf("$sort"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/loyaltycards/{torrowId}/participants".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<kotlin.Array<ParticipantView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ParticipantView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param userMessage  (optional)
     * @return ParticipationResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationDeclineaccessPut(torrowId: kotlin.String, body: kotlin.Array<kotlin.String>? = null, userMessage: kotlin.String? = null): ParticipationResp {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("userMessage" to listOf("$userMessage"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/declineaccess".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<ParticipationResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ParticipationResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @return ParticipationResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationGrantaccessPut(torrowId: kotlin.String, body: kotlin.Array<kotlin.String>? = null): ParticipationResp {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/grantaccess".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<ParticipationResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ParticipationResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param profileId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return ObjectInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationProfileIdTypePut(torrowId: kotlin.String, profileId: kotlin.String, body: kotlin.String? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): ObjectInfo {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/{profileId}/type".replace("{" + "torrowId" + "}", "$torrowId").replace("{" + "profileId" + "}", "$profileId"), query = localVariableQuery
        )
        val response = request<ObjectInfo>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ObjectInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return ObjectInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationProfilePut(torrowId: kotlin.String, body: kotlin.String? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): ObjectInfo {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/profile".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<ObjectInfo>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ObjectInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @return Participation
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationRejectPut(torrowId: kotlin.String, body: kotlin.String? = null): Participation {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/reject".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<Participation>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Participation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param userMessage  (optional)
     * @return Participation
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationRejectofferPut(torrowId: kotlin.String, body: kotlin.String? = null, userMessage: kotlin.String? = null): Participation {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("userMessage" to listOf("$userMessage"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/rejectoffer".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<Participation>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Participation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param userMessage  (optional)
     * @return Participation
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationRequestaccessPut(torrowId: kotlin.String, body: kotlin.String? = null, userMessage: kotlin.String? = null): Participation {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("userMessage" to listOf("$userMessage"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/requestaccess".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<Participation>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Participation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @return ParticipationResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationRevokeofferPut(torrowId: kotlin.String, body: kotlin.Array<kotlin.String>? = null): ParticipationResp {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/revokeoffer".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<ParticipationResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ParticipationResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @return Participation
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationRevokerequestPut(torrowId: kotlin.String): Participation {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/revokerequest".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<Participation>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Participation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @return ParticipationResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdParticipationSharePut(torrowId: kotlin.String, body: ShareItemReq? = null): ParticipationResp {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/participation/share".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<ParticipationResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ParticipationResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return ObjectInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdPersonalsolutiondataPut(torrowId: kotlin.String, body: PersonalSolutionData? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): ObjectInfo {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/personalsolutiondata".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<ObjectInfo>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ObjectInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return TorrowObject
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdPublicityPut(torrowId: kotlin.String, body: kotlin.String? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): TorrowObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/publicity".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<TorrowObject>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TorrowObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param checkVersion  (optional, default to false)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return LoyaltyCardItem
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdPut(torrowId: kotlin.String, body: LoyaltyCardItem? = null, checkVersion: kotlin.Boolean? = null, isNeedAnnouncement: kotlin.Boolean? = null): LoyaltyCardItem {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("checkVersion" to listOf("$checkVersion"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<LoyaltyCardItem>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LoyaltyCardItem
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @return Participation
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdSavetomindmapPut(torrowId: kotlin.String, body: SaveItemToMindMapReq? = null): Participation {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/savetomindmap".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<Participation>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Participation
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @return SendLinkOfItemResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdSendlinkPut(torrowId: kotlin.String, body: SendLinkOfItemReq? = null): SendLinkOfItemResp {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/sendlink".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<SendLinkOfItemResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as SendLinkOfItemResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdShorturlPost(torrowId: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/loyaltycards/{torrowId}/shorturl".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return TorrowObject
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdSolutiondataPut(torrowId: kotlin.String, body: SolutionData? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): TorrowObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/solutiondata".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<TorrowObject>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TorrowObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param subscriptionId  
     * @return kotlin.Array<BalanceValue>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdSubscriptionsSubscriptionIdBalanceGet(torrowId: kotlin.String, subscriptionId: kotlin.String): kotlin.Array<BalanceValue> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/loyaltycards/{torrowId}/subscriptions/{subscriptionId}/balance".replace("{" + "torrowId" + "}", "$torrowId").replace("{" + "subscriptionId" + "}", "$subscriptionId")
        )
        val response = request<kotlin.Array<BalanceValue>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<BalanceValue>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to true)
     * @return TorrowObject
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdTagsPut(torrowId: kotlin.String, body: kotlin.Array<kotlin.String>? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): TorrowObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/tags".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<TorrowObject>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TorrowObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @param versionToCheck  (optional, default to 0)
     * @param isNeedAnnouncement  (optional, default to false)
     * @return TorrowObject
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdTorrowaccountIdPut(torrowId: kotlin.String, body: kotlin.String? = null, versionToCheck: kotlin.Int? = null, isNeedAnnouncement: kotlin.Boolean? = null): TorrowObject {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("versionToCheck" to listOf("$versionToCheck"), "isNeedAnnouncement" to listOf("$isNeedAnnouncement"))
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/torrowaccount/id".replace("{" + "torrowId" + "}", "$torrowId"), query = localVariableQuery
        )
        val response = request<TorrowObject>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TorrowObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param torrowId  
     * @param body  (optional)
     * @return TorrowObject
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsTorrowIdUniquenamePut(torrowId: kotlin.String, body: kotlin.String? = null): TorrowObject {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/api/v1/loyaltycards/{torrowId}/uniquename".replace("{" + "torrowId" + "}", "$torrowId")
        )
        val response = request<TorrowObject>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TorrowObject
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param uniqueName  
     * @return LoyaltyCardItem
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1LoyaltycardsUniquenameUniqueNameGet(uniqueName: kotlin.String): LoyaltyCardItem {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/loyaltycards/uniquename/{uniqueName}".replace("{" + "uniqueName" + "}", "$uniqueName")
        )
        val response = request<LoyaltyCardItem>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as LoyaltyCardItem
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
