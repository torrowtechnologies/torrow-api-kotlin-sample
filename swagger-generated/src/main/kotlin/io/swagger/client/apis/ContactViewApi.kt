/**
 * Torrow API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import net.torrow.api.models.ContactView
import net.torrow.api.models.CreateViewListReq
import net.torrow.api.models.CreateViewListResp
import net.torrow.api.models.DeleteResponse
import net.torrow.api.models.ItemViewSortCondition
import net.torrow.api.models.ObjectInfo
import net.torrow.api.models.UpdateViewListOrderReq
import net.torrow.api.models.UpdateViewListOrderResp

import io.swagger.client.infrastructure.*

class ContactViewApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param parentId  
     * @param childId  
     * @return DeleteResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsPinnedChildIdDelete(parentId: kotlin.String, childId: kotlin.String): DeleteResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/contacts/{parentId}/views/pinned/{childId}".replace("{" + "parentId" + "}", "$parentId").replace("{" + "childId" + "}", "$childId")
        )
        val response = request<DeleteResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DeleteResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param childId  
     * @return ContactView
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsPinnedChildIdGet(parentId: kotlin.String, childId: kotlin.String): ContactView {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/contacts/{parentId}/views/pinned/{childId}".replace("{" + "parentId" + "}", "$parentId").replace("{" + "childId" + "}", "$childId")
        )
        val response = request<ContactView>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ContactView
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param childId  
     * @param alias  (optional)
     * @return ObjectInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsPinnedChildIdUnpinPost(parentId: kotlin.String, childId: kotlin.String, alias: kotlin.String? = null): ObjectInfo {
        val localVariableQuery: MultiValueMap = mapOf("alias" to listOf("$alias"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/contacts/{parentId}/views/pinned/{childId}/unpin".replace("{" + "parentId" + "}", "$parentId").replace("{" + "childId" + "}", "$childId"), query = localVariableQuery
        )
        val response = request<ObjectInfo>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ObjectInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param tags  (optional)
     * @param take  (optional, default to 2147483647)
     * @param skip  (optional, default to 0)
     * @param lmFrom  (optional)
     * @param lmTo  (optional)
     * @param includeDeleted  (optional, default to false)
     * @param sort  (optional)
     * @return kotlin.Array<ContactView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsPinnedGet(parentId: kotlin.String, tags: kotlin.Array<kotlin.String>? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, lmFrom: java.time.LocalDateTime? = null, lmTo: java.time.LocalDateTime? = null, includeDeleted: kotlin.Boolean? = null, sort: ItemViewSortCondition? = null): kotlin.Array<ContactView> {
        val localVariableQuery: MultiValueMap = mapOf("tags" to toMultiValue(tags!!.toList(), "multi"), "take" to listOf("$take"), "skip" to listOf("$skip"), "lmFrom" to listOf("$lmFrom"), "lmTo" to listOf("$lmTo"), "includeDeleted" to listOf("$includeDeleted"), "sort" to listOf("$sort"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/contacts/{parentId}/views/pinned".replace("{" + "parentId" + "}", "$parentId"), query = localVariableQuery
        )
        val response = request<kotlin.Array<ContactView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ContactView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param body  (optional)
     * @return CreateViewListResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsPinnedPost(parentId: kotlin.String, body: CreateViewListReq? = null): CreateViewListResp {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/contacts/{parentId}/views/pinned".replace("{" + "parentId" + "}", "$parentId")
        )
        val response = request<CreateViewListResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CreateViewListResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param body  (optional)
     * @return UpdateViewListOrderResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsPinnedUpdateorderPost(parentId: kotlin.String, body: UpdateViewListOrderReq? = null): UpdateViewListOrderResp {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/contacts/{parentId}/views/pinned/updateorder".replace("{" + "parentId" + "}", "$parentId")
        )
        val response = request<UpdateViewListOrderResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UpdateViewListOrderResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param childId  
     * @return DeleteResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsUserChildIdDelete(parentId: kotlin.String, childId: kotlin.String): DeleteResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/api/v1/contacts/{parentId}/views/user/{childId}".replace("{" + "parentId" + "}", "$parentId").replace("{" + "childId" + "}", "$childId")
        )
        val response = request<DeleteResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as DeleteResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param childId  
     * @return ContactView
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsUserChildIdGet(parentId: kotlin.String, childId: kotlin.String): ContactView {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/contacts/{parentId}/views/user/{childId}".replace("{" + "parentId" + "}", "$parentId").replace("{" + "childId" + "}", "$childId")
        )
        val response = request<ContactView>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ContactView
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param childId  
     * @param alias  (optional)
     * @return ObjectInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsUserChildIdPinPost(parentId: kotlin.String, childId: kotlin.String, alias: kotlin.String? = null): ObjectInfo {
        val localVariableQuery: MultiValueMap = mapOf("alias" to listOf("$alias"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/contacts/{parentId}/views/user/{childId}/pin".replace("{" + "parentId" + "}", "$parentId").replace("{" + "childId" + "}", "$childId"), query = localVariableQuery
        )
        val response = request<ObjectInfo>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ObjectInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param tags  (optional)
     * @param take  (optional, default to 2147483647)
     * @param skip  (optional, default to 0)
     * @param lmFrom  (optional)
     * @param lmTo  (optional)
     * @param includeDeleted  (optional, default to false)
     * @param sort  (optional)
     * @return kotlin.Array<ContactView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsUserGet(parentId: kotlin.String, tags: kotlin.Array<kotlin.String>? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, lmFrom: java.time.LocalDateTime? = null, lmTo: java.time.LocalDateTime? = null, includeDeleted: kotlin.Boolean? = null, sort: ItemViewSortCondition? = null): kotlin.Array<ContactView> {
        val localVariableQuery: MultiValueMap = mapOf("tags" to toMultiValue(tags!!.toList(), "multi"), "take" to listOf("$take"), "skip" to listOf("$skip"), "lmFrom" to listOf("$lmFrom"), "lmTo" to listOf("$lmTo"), "includeDeleted" to listOf("$includeDeleted"), "sort" to listOf("$sort"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/contacts/{parentId}/views/user".replace("{" + "parentId" + "}", "$parentId"), query = localVariableQuery
        )
        val response = request<kotlin.Array<ContactView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ContactView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param body  (optional)
     * @return CreateViewListResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsUserPost(parentId: kotlin.String, body: CreateViewListReq? = null): CreateViewListResp {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/contacts/{parentId}/views/user".replace("{" + "parentId" + "}", "$parentId")
        )
        val response = request<CreateViewListResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CreateViewListResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param parentId  
     * @param body  (optional)
     * @return UpdateViewListOrderResp
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsParentIdViewsUserUpdateorderPost(parentId: kotlin.String, body: UpdateViewListOrderReq? = null): UpdateViewListOrderResp {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/api/v1/contacts/{parentId}/views/user/updateorder".replace("{" + "parentId" + "}", "$parentId")
        )
        val response = request<UpdateViewListOrderResp>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as UpdateViewListOrderResp
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param take  (optional, default to 2147483647)
     * @param skip  (optional, default to 0)
     * @param lmFrom  (optional)
     * @param lmTo  (optional)
     * @param includeDeleted  (optional, default to false)
     * @param sort  (optional)
     * @return kotlin.Array<ContactView>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ContactsViewsUserGet(take: kotlin.Int? = null, skip: kotlin.Int? = null, lmFrom: java.time.LocalDateTime? = null, lmTo: java.time.LocalDateTime? = null, includeDeleted: kotlin.Boolean? = null, sort: ItemViewSortCondition? = null): kotlin.Array<ContactView> {
        val localVariableQuery: MultiValueMap = mapOf("take" to listOf("$take"), "skip" to listOf("$skip"), "lmFrom" to listOf("$lmFrom"), "lmTo" to listOf("$lmTo"), "includeDeleted" to listOf("$includeDeleted"), "sort" to listOf("$sort"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/contacts/views/user", query = localVariableQuery
        )
        val response = request<kotlin.Array<ContactView>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<ContactView>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
