/**
 * Torrow API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import net.torrow.api.models.DictionarySortCondition
import net.torrow.api.models.Hobby
import net.torrow.api.models.Place

import io.swagger.client.infrastructure.*

class ThesaurusApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * 
     * 
     * @param lng  (optional)
     * @param take  (optional)
     * @param skip  (optional)
     * @param includeDeleted  (optional)
     * @param sort  (optional)
     * @return kotlin.Array<Hobby>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ThesaurusHobbiesGet(lng: kotlin.String? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, includeDeleted: kotlin.Boolean? = null, sort: DictionarySortCondition? = null): kotlin.Array<Hobby> {
        val localVariableQuery: MultiValueMap = mapOf("lng" to listOf("$lng"), "take" to listOf("$take"), "skip" to listOf("$skip"), "includeDeleted" to listOf("$includeDeleted"), "sort" to listOf("$sort"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/thesaurus/hobbies", query = localVariableQuery
        )
        val response = request<kotlin.Array<Hobby>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Hobby>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param lat  (optional)
     * @param lon  (optional)
     * @param r  (optional)
     * @param txt  (optional)
     * @param lng  (optional)
     * @param take  (optional)
     * @param skip  (optional)
     * @param includeDeleted  (optional)
     * @param sort  (optional)
     * @return kotlin.Array<Place>
     */
    @Suppress("UNCHECKED_CAST")
    fun apiV1ThesaurusPlacesGet(lat: kotlin.Double? = null, lon: kotlin.Double? = null, r: kotlin.Double? = null, txt: kotlin.String? = null, lng: kotlin.String? = null, take: kotlin.Int? = null, skip: kotlin.Int? = null, includeDeleted: kotlin.Boolean? = null, sort: DictionarySortCondition? = null): kotlin.Array<Place> {
        val localVariableQuery: MultiValueMap = mapOf("lat" to listOf("$lat"), "lon" to listOf("$lon"), "r" to listOf("$r"), "txt" to listOf("$txt"), "lng" to listOf("$lng"), "take" to listOf("$take"), "skip" to listOf("$skip"), "includeDeleted" to listOf("$includeDeleted"), "sort" to listOf("$sort"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/api/v1/thesaurus/places", query = localVariableQuery
        )
        val response = request<kotlin.Array<Place>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Place>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
